#!/bin/bash
if [ "$EUID" -ne 0 ]; then
  echo "Please run as root"
  exit
fi

function is_ip_address {
  regex="^(0*(1?[0-9]{1,2}|2([0-4][0-9]|5[0-5]))\.){3}0*(1?[0-9]{1,2}|2([‌​0-4][0-9]|5[0-5]))$"
  if [[ $1 =~ $regex ]]; then
    return 0 # success
  else
    return 1 # fail
  fi
}

function add_argument {
  if [ "$first_ip" = false ]; then
    arguments+=","
  else
    first_ip=false
  fi
  arguments+="$1"
}

# Arguments:
# $1 The line containing the ip address - the first item (index 0) should be the ip address
# Returns 0 for success, 1 for failure
function store_ip_address {
  lineArr=($1)
  if ! is_ip_address ${lineArr[0]}; then
    # Invalid IP address
    return 1
  fi
  ip_addresses+=(${lineArr[0]})
  return 0
}

# Arguments:
# $1 The line containing the subnet mask - the second item (index 1) should be a subnet mask.
#    Default value is 0.0.0.0
# Adds the subnet mask to the subnet_masks array variable
function store_subnet_mask {
  mask=($1)
  if is_ip_address $mask; then
    subnet_masks+=($mask)
    return 0
  fi
  subnet_masks+=("0.0.0.0")
  return 0
}

# Creates the network namespace
# Arguments:
# $1 The number of the namespace to create
function create_network_namespace {
  echo "Creating network namespace $1"
  echo "# ip netns add space$1"
  ip netns add space$1
}

# Assigns the vnic with number $1 to the network namespace with number $2
function assign_vnic_to_namespace {
  echo "Connecting vnic $1 to namespace $2"
  # Associate the VNIC device with the namespace
  echo "# ip link set vnic$1 netns space$2"
  ip link set vnic$1 netns space$2

  # Use ifconfig within the namespace to setup the VNIC device with the desired ip address
  # Add the subnet mask
  echo "# ip netns exec space$2 ifconfig vnic$1 up ${ip_addresses[$1]} netmask ${subnet_masks[$1]}"
  ip netns exec space$2 ifconfig vnic$1 up ${ip_addresses[$1]} netmask ${subnet_masks[$1]}

  echo "# ip netns exec space$2 ifconfig"
  ip netns exec space$2 ifconfig
}

ip_file="./ip_mappings.txt"
arguments="ip_mappings=\""
first_ip=true
address_count=0
ip_addresses=()
subnet_masks=()

# Go through each line of the IP addresses file. If it is an IP address, add it, otherwise resolve it as a hostname
while read -r line || [[ -n "$line" ]]; do
  echo "Reading the line: $line"
  # Check if line is commented (# at the start of the line)
  if [[ $line =~ ^\# ]]; then
    echo "Line commented, skipping"
    continue
  fi

  # Split the line into seperate arguments using space as delimiter
  lineArr=($line)

  if is_ip_address ${lineArr[0]}; then
    add_argument "${lineArr[0]}"
    ((address_count++))
    ip_addresses+=(${lineArr[0]})

    # Check the second argument for the subnet mask
    store_subnet_mask ${lineArr[1]}

  else
    ip=$(host ${lineArr[0]} | awk '/has address/ { print $4 ; exit }')

    # Check that hostname has been successfully resolved
    if [[ -n $ip ]]; then
      add_argument "$ip"
      ((address_count++))
      ip_addresses+=($ip)

      # Check the second argument for the subnet mask
      store_subnet_mask ${lineArr[1]}
    else
      echo "WARNING: unable to resolve host name: ${lineArr[0]}"
    fi
  fi


done < "$ip_file"
arguments+=\"

# echo $arguments

# echo "SUBNET MASKS"
# for netmask in ${subnet_masks[@]}; do
#   echo "$netmask"
# done

# echo ""
# echo "IP ADDRESSES"
# for addr in ${ip_addresses[@]}; do
#   echo "$addr"
# done

# for (( i=0; i<${#ip_addresses[@]}; i++ )) do
#   echo "IP: ${ip_addresses[i]} SUBNET_MASK: ${subnet_masks[i]}"
# done

#
# Instantiate the kernel module vnic.ko
#
echo "# insmod vnic.ko $arguments"
insmod vnic.ko $arguments

#
# Setup each device using ifconfig
#

# Remove any existing network namespaces
echo "# ip -all netns delete"
ip -all netns delete


# Create the network namespace for the network simulator
# VNICs 0 and 1 live in space1
create_network_namespace 1
assign_vnic_to_namespace 0 1
assign_vnic_to_namespace 1 1

# Create the rest of the namespaces, and assign the vnics to them

# Create network namespaces
for (( i=2; i<address_count; i++ )) do

  create_network_namespace $i
  assign_vnic_to_namespace $i $i

done






# ifconfig vnic0 l0
# ifconfig vnic1 l1
